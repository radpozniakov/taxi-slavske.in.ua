const fs = require('fs');
const yaml = require('js-yaml');
const postcss = require('postcss');
const postcssCsso = require('postcss-csso');
const autoprefixer = require('autoprefixer');
const postcssImport = require('postcss-import');
const htmlMin = require('html-minifier-terser');

module.exports = (config) => {
  config.addTransform('html-minify', async (content, path) => {
    if (path && path.endsWith('.html')) {
      return await htmlMin.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
      });
    }
    return content;
  });

  config.addDataExtension('yml', (contents) => {
    return yaml.load(contents);
  });

  const styles = ['./src/styles/index.css'];

  config.addTemplateFormats('css');

  config.addExtension('css', {
    outputFileExtension: 'css',
    compile: async (content, path) => {
      if (!styles.includes(path)) {
        return;
      }

      return async () => {
        let output = await postcss([
          postcssImport,
          autoprefixer,
          postcssCsso,
        ]).process(content, {
          from: path,
        });

        return output.css;
      };
    },
  });

  [
    'src/google705eff3b8289fba2.html',
    'src/index.html',
    'src/styles/index.css',
    'src/assets',
    'src/manifest.json',
    'src/sitemap.xml',
    'src/robots.txt',
  ].forEach((path) => config.addPassthroughCopy(path));

  return {
    dir: {
      input: 'src',
      output: 'dist',
      includes: 'includes',
      layouts: 'layouts',
      data: 'data',
    },
    dataTemplateEngine: 'njk',
    markdownTemplateEngine: 'njk',
    htmlTemplateEngine: 'njk',
    templateFormats: ['md', 'njk'],
  };
};
